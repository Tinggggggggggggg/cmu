/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
/* The pixel interface describes the pixel type. It also defines
   five functions: get_red(p), get_green(p), get_blue(p),
   get_alpha(p), and make_pixel(a,r,g,b).  If you're *given* a
   working pixel library, you can use the pixel interface
   without knowing how pixels are represented.

   When writing this file, only use the pixel interface.  We'll
   check your code by compiling and running it against different
   implementations of the pixel interface.

   There are  tasks in this file:
    - Task 1 - Implement quantize() as described in the writeup
    - Task 2 - Testing quantize()
*/

/* Task 1 - Implement quantize() as described in the writeup */

pixel_t quantize(pixel_t p, int q)
//@requires 0 <= q && q <= 8;
{
  int mask = ~((1 << q) - 1);
  int red = (get_red(p)&mask); 
  // printf("%d", red);
  int green = (get_green(p)&mask);
  // printf("%d", green);
  int blue = (get_blue(p)&mask);
  int alpha = get_alpha(p);
  return make_pixel(alpha, red, green, blue);

  // Implement me!
}

/* Task 2 - Testing quantize()

   Write some more tests for quantize. Remember to respect the pixels
   interface! We *will* run these tests, and will grade them based on
   their ability to catch buggy implementations of quantize.
*/

void test_quantize() {
  pixel_t p = quantize(make_pixel(0xFF, 0xFF, 0xFF, 0xFF), 4);
  assert(get_alpha(p) == 0xFF);
  assert(get_red(p)   == 0xF0);
  assert(get_green(p) == 0xF0);
  assert(get_blue(p)  == 0xF0);
  pixel_t a = quantize(make_pixel(0xFF, 0xFF, 0xFF, 0xFF), 0);
  assert(get_alpha(a) == 0xFF);
  assert(get_red(a)   == 0xFF);
  assert(get_green(a) == 0xFF);
  assert(get_blue(a)  == 0xFF);
  pixel_t b = quantize(make_pixel(0xFF, 0xFF, 0xFF, 0xFF), 8);
  assert(get_alpha(b) == 0xFF);
  assert(get_red(b)   == 0x00);
  assert(get_green(b) == 0x00);
  assert(get_blue(b)  == 0x00);
  pixel_t c = quantize(make_pixel(0x6B, 0x4C, 0x72, 0xBE), 3);
  assert(get_alpha(c) == 0x6B);
  assert(get_red(c)   == 0x48);
  assert(get_green(c) == 0x70);
  assert(get_blue(c)  == 0xB8);
  pixel_t d = quantize(make_pixel(0x6B, 0x4C, 0x72, 0x4E), 5);
  assert(get_alpha(d) == 0x6B);
  assert(get_red(d)   == 0x40);
  assert(get_green(d) == 0x60);
  assert(get_blue(d)  == 0x40);


  // More tests ...

}
