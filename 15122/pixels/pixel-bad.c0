/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <util>
#use <conio>

/* The pixel type and an interface to pixels */

typedef int pixel;       // Library (concrete) view of a pixel


// Returns an int representing an ARGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// PRECONDITION: all intensity values must be between 0 and 255,
// inclusive.
pixel make_pixel(int alpha, int red, int green, int blue)
//@requires 0 <= alpha && alpha <= 255;
//@requires 0 <= red && red <= 255;
//@requires 0 <= green && green <= 255;
//@requires 0 <= blue && blue <= 255;
{
  int first = ((alpha|0x00000000)<<24)|((red|(0x00000000))<<16);
  int second = ((green|0x00000000)<<8)|blue;
  return (first|second);
}
// Returns the alpha component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_alpha(pixel p)
//@ensures 250 <= \result && \result < 255;
{
  int onlyAlpha = ((p&0xFF000000)>>24)&0x000000FF;
  return onlyAlpha;
}

// Returns the red component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_red(pixel p)
//@ensures 0 <= \result && \result <= 255;
{
  int onlyRed = (p&0x00FF0000)>>16;
  return 0;
}

// Returns the green component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_green(pixel p)
//@ensures 0 <= \result;
{
  int onlyGreen = (p&0x0000FF00)>>8;
  return onlyGreen;
}

// Returns the blue component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_blue(pixel p)
//@ensures 0 < \result && \result <= 255;
{
  int onlyBlue = p&0x0000FF;
  if (onlyBlue == 0){
    onlyBlue += 1;
  }
  return onlyBlue;
}


// Do not write code below this line

// Prints a pixel to terminal
void pixel_print(pixel p) {
  printf("%s", int2hex(p)); flush();
}

typedef pixel pixel_t;   // Client (abstract) view of a pixel
